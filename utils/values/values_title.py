from typing import Union
from datetime import date
from aiogram.utils import markdown

from data.config import LANGUAGE_UZ, LANGUAGE_EN, LANGUAGE_RU
from utils.values.values_django import ORDER_STATUSES, TYPES_OF_PAYMENT
from django_project.telegrambot.constants.models import Constants
from django_project.telegrambot.usersmanage.models import Item, OrderItem
from loader import dp
from utils.db_api import db_commands
from utils.values import others

CHOOSE_CATEGORY_OR_ITEMS = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç',
    LANGUAGE_EN: 'Select a category or product',
    LANGUAGE_UZ: '–¢–æ–∏—Ñ–∞–Ω–∏ –µ–∫–∏ –º–∞—Ö—Å—É–ª–æ—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥'
}

CHOOSE_CATEGORY = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    LANGUAGE_EN: 'Select a category',
    LANGUAGE_UZ: '–ë–∏—Ä —Ç–æ–∏—Ñ–∞–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥'
}

NOT_FOUND_CLIENT = {
    LANGUAGE_RU: 'üôÖ –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç',
    LANGUAGE_EN: 'üôÖ Client not found',
    LANGUAGE_UZ: 'üôÖ –ú–∏–∂–æ–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏'
}

CHOOSE_BELOW = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨á',
    LANGUAGE_UZ: '“ö—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚¨á',
    LANGUAGE_EN: 'Select button ‚¨á'
}

CHOOSE_CLIENT = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚¨á',
    LANGUAGE_UZ: '–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚¨á',
    LANGUAGE_EN: 'Choose one of these clients ‚¨á'
}

CHOOSE_CATEGORY_OF_REVIEW = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–∑—ã–≤–∞ üìã',
    LANGUAGE_UZ: '–ö—û—Ä–∏–± —á–∏“õ–∏—à —Ç–æ–∏—Ñ–∞—Å–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üìã',
    LANGUAGE_EN: 'Select a review category üìã'
}

CHOOSE_PRODUCT = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä',
    LANGUAGE_UZ: '–ú–∞—Ö—Å—É–ª–æ—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥',
    LANGUAGE_EN: 'Select a product'
}

EMPTY = {
    LANGUAGE_RU: '–ü—É—Å—Ç–æ ü§î',
    LANGUAGE_UZ: '–ë—û—à ü§î',
    LANGUAGE_EN: 'Empty ü§î'
}

REMAINDER = {
    LANGUAGE_RU: '–û—Å—Ç–∞—Ç–æ–∫',
    LANGUAGE_UZ: '“ö–æ–ª–≥–∞–Ω “õ–∏—Å–º–∏',
    LANGUAGE_EN: 'Remainder'
}

PRICE = {
    LANGUAGE_RU: '–¶–µ–Ω–∞',
    LANGUAGE_UZ: '–ù–∞—Ä—Ö',
    LANGUAGE_EN: 'Price'
}

SUM = {
    LANGUAGE_RU: '–°—É–º',
    LANGUAGE_EN: 'Sum',
    LANGUAGE_UZ: '–°—û–º'
}


def get_currency(language: str):
    constanta = Constants.default_constant()
    currency = SUM[language]
    if constanta and constanta.currency is not None:
        attr = others.get_attribute_by_language(language=language)
        currency = getattr(constanta.currency, attr)
    return currency


DAY = {
    LANGUAGE_RU: '–î–µ–Ω—å',
    LANGUAGE_UZ: '–ö—É–Ω',
    LANGUAGE_EN: 'Day'
}

WEEK = {
    LANGUAGE_RU: '–ù–µ–¥–µ–ª—è',
    LANGUAGE_UZ: '–•–∞—Ñ—Ç–∞',
    LANGUAGE_EN: 'Week'
}

MONTH = {
    LANGUAGE_RU: '–ú–µ—Å—è—Ü',
    LANGUAGE_UZ: '–û–π',
    LANGUAGE_EN: 'Month'
}

CONTACT_TO_REVIEW = {
    LANGUAGE_RU: 'üìù –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –æ—Ç–∑—ã–≤—ã',
    LANGUAGE_EN: 'üìù You can contact through reviews',
    LANGUAGE_UZ: 'üìù –®–∞—Ä—Ö–ª–∞—Ä –æ—Ä“õ–∞–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω',
}

ENTER_QUANTITY = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º',
    LANGUAGE_EN: 'Select or send message with quantity',
    LANGUAGE_UZ: '–•–∞–±–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ –µ–∫–∏ —é–±–æ—Ä–∏–Ω–≥'
}


def opportunity_delete_order(language: str, timeout_cancel_order):
    if language == LANGUAGE_EN:
        return f'You have {timeout_cancel_order} seconds to cancel your order',
    elif language == LANGUAGE_UZ:
        return f'–ë—É—é—Ä—Ç–º–∞–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω {timeout_cancel_order} —Å–æ–Ω–∏—è –±–æ—Ä'
    else:
        return f'–£ –≤–∞—Å –µ—Å—Ç—å {timeout_cancel_order} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'


NOT_ACCESS = {
    LANGUAGE_RU: '–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω üö´',
    LANGUAGE_EN: 'Access to the bot is denied üö´',
    LANGUAGE_UZ: '–ë–æ—Ç–≥–∞ –∫–∏—Ä–∏—à —Ç–∞“õ–∏“õ–ª–∞–Ω–≥–∞–Ω üö´'
}

NOT_ACCESS_TO_ACT_SVERKI = {
    LANGUAGE_RU: '–î–æ—Å—Ç—É–ø –∫ <b>–∞–∫—Ç —Å–≤–µ—Ä–∫–∏</b> –∑–∞–ø—Ä–µ—â–µ–Ω üö´',
    LANGUAGE_EN: 'Access to <b>act sverki</b> is denied üö´',
    LANGUAGE_UZ: '<b>–ê–∫—Ç —Å–≤–µ—Ä–∫–∏</b>–≥–∞ –∫–∏—Ä–∏—à —Ç–∞“õ–∏“õ–ª–∞–Ω–≥–∞–Ω üö´'
}

NOT_ALLOW_TO_ADD_ORDER = {
    LANGUAGE_RU: '<b>–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–æ–ø. –∑–∞–∫–∞–∑–∞</b> üö´',
    LANGUAGE_EN: '<b>Not available for add. order</b> üö´',
    LANGUAGE_UZ: '<b>“ö—û—à–∏—à —É—á—É–Ω –º–∞–≤–∂—É–¥ —ç–º–∞—Å. –±—É—é—Ä—Ç–º–∞</b> üö´'
}


def not_allow_to_add_order(item_name, language):
    return f"{NOT_ALLOW_TO_ADD_ORDER[language]}\n{item_name}"


FILL_IN_THE_ADD_ORDER = {
    LANGUAGE_RU: '‚ùóÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø. –∑–∞–∫–∞–∑',
    LANGUAGE_EN: '‚ùóÔ∏è Fill in the add. order',
    LANGUAGE_UZ: '‚ùóÔ∏è –ö—û—à–∏–º—á–∞–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞'
}

WRITE_MORE_INLINE = {
    LANGUAGE_RU: '–í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–∞ üìù',
    LANGUAGE_EN: 'Please enter at least 3 characters üìù',
    LANGUAGE_UZ: '–ò–ª—Ç–∏–º–æ—Å, –∫–∞–º–∏–¥–∞ 3—Ç–∞ –±–µ–ª–≥–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ üìù'
}

GO_SEARCH = {
    LANGUAGE_RU: '–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä üëá',
    LANGUAGE_EN: 'Find a product üëá',
    LANGUAGE_UZ: '–ú–∞—Ö—Å—É–ª–æ—Ç–Ω–∏ —Ç–æ–ø–∏–Ω–≥ üëá'
}

REVIEW_MESSAGE = {
    LANGUAGE_RU: 'üì® <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–æ–º</b>',
    LANGUAGE_EN: 'üì® <b>Send a message, photo or voice message with your review</b>',
    LANGUAGE_UZ: 'üì® <b>–®–∞—Ä—Ö–∏–Ω–≥–∏–∑ –±–∏–ª–∞–Ω —Ö–∞–±–∞—Ä, —Ä–∞—Å–º —ë–∫–∏ –æ–≤–æ–∑–ª–∏ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–Ω–≥</b>'
}

ADD_MORE_ORDER = {
    LANGUAGE_RU: 'üìù –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ',
    LANGUAGE_EN: 'üìù Add more items if you have more space in your car',
    LANGUAGE_UZ: 'üìù –ê–≤—Ç–æ–º–æ–±–∏–ª–∏–Ω–≥–∏–∑–¥–∞ –∫—û–ø—Ä–æ“õ –∂–æ–π –±—û–ª—Å–∞, –∫—û–ø—Ä–æ“õ –Ω–∞—Ä—Å–∞–ª–∞—Ä–Ω–∏ –∫—û—à–∏–Ω–≥'
}

GOT_REVIEW = {
    LANGUAGE_RU: 'üòä <b>–ü–æ–ª—É—á–µ–Ω–æ, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ç–∑—ã–≤</b>',
    LANGUAGE_EN: 'üòä <b>Received, thank you for your feedback</b>',
    LANGUAGE_UZ: 'üòä <b>“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏, —Ñ–∏–∫—Ä-–º—É–ª–æ—Ö–∞–∑–∞–Ω–≥–∏–∑ —É—á—É–Ω —Ç–∞—à–∞–∫–∫—É—Ä</b>'
}

RULES_ADDING_TO_ADD_ORDER = {
    LANGUAGE_RU: 'üëá <b>–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–æ–ø. –∑–∞–∫–∞–∑:</b>\n'
                 '1) –ù–µ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä.\n'
                 '2) –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø. –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –±–æ–ª—å—à–µ 5% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤.\n',
    LANGUAGE_UZ: 'üëá <b>“ö—û—à–∏–º—á–∞ –±—É—é—Ä—Ç–º–∞ “õ—û—à–∏—à “õ–æ–∏–¥–∞–ª–∞—Ä–∏:</b>\n'
                 '1) –î–µ—Ñ–∏—Ü–∏—Ç –º–∞—Ö—Å—É–ª–æ—Ç –µ–º–∞—Å\n'
                 '2) “ö—û—à–∏–ª–≥–∞–Ω–ª–∞—Ä–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Å–æ–Ω–∏. –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —É–º—É–º–∏–π —Å–æ–Ω–∏–Ω–∏–Ω–≥ 5% –¥–∞–Ω –∫—û–ø –±—û–ª–º–∞–≥–∞–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä\n',
    LANGUAGE_EN: 'üëá <b>Rules for adding to an additional order:</b>\n'
                 '1) Not a hot product\n'
                 '2) The total number of add. orders no more than 5% of the total number of orders\n'
}

RULE_LIMIT_ADD_ORDER = {
    LANGUAGE_RU: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø. –∑–∞–∫–∞–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 5% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤.',
    LANGUAGE_UZ: '“ö—û—à–∏–º—á–∞–ª–∞—Ä–Ω–∏–Ω–≥ —É–º—É–º–∏–π —Å–æ–Ω–∏. –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä —É–º—É–º–∏–π –±—É—é—Ä—Ç–º–∞–ª–∞—Ä —Å–æ–Ω–∏–Ω–∏–Ω–≥ 5% –¥–∞–Ω –∫—û–ø –±—û–ª–º–∞—Å–ª–∏–≥–∏ –∫–µ—Ä–∞–∫',
    LANGUAGE_EN: 'The total number of add. orders should be no more than 5% of the total number of orders'
}

FORBIDDEN = {
    LANGUAGE_RU: '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ',
    LANGUAGE_UZ: '‚ùå –¢–∞“õ–∏“õ–ª–∞–Ω–≥–∞–Ω',
    LANGUAGE_EN: '‚ùå Forbidden'
}


def get_rate_limit(language: str, limit: Union[str, int]):
    RATE_LIMIT = {
        LANGUAGE_RU: f'–í—ã–¥–∞–Ω –º—É—Ç –Ω–∞ {limit} —Å–µ–∫—É–Ω–¥ üïë',
        LANGUAGE_EN: f'Issued a mut for {limit} seconds üïë',
        LANGUAGE_UZ: f'{limit} —Å–æ–Ω–∏—è –¥–∞–≤–æ–º–∏–¥–∞ –º—É—Ç —á–∏“õ–∞—Ä–∏–ª–¥–∏ üïë'
    }
    return RATE_LIMIT[language]


def get_remainder(language: str, num="0", tag=True):
    if not num:
        num = NOT_SET[language].lower()
    return f"{REMAINDER[language].lower()[:3]}: {'<code>' if tag else ''}{('100+' if not isinstance(num, str) and num > 100 else num)}{'</code>' if tag else ''}"


def get_amount(language: str, num="0", tag=True):
    return f"{PRICE[language].capitalize()}: {'<code>' if tag else ''}{num}{'</code>' if tag else ''} {get_currency(language=language).lower()}"


def get_total(language: str, total: Union[str, int] = "0"):
    return f"{TOTAL[language]}: <code>{total}</code> {get_currency(language=language).lower()}"


def get_quantity(language: str, quantity: Union[str, int] = "0"):
    return f"{QUANTITY[language]}: <code>{quantity}</code> {UNIT_WT_low[language]}"


def get_sample_quantity(language: str, num: Union[str, int] = "0"):
    result = f'‚ûñ –í—ã–±. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{num}</code> —à—Ç. ‚ûñ'
    if language == LANGUAGE_EN:
        result = f'‚ûñ Sample quantity: <code>{num}</code> pc. ‚ûñ'
    elif language == LANGUAGE_UZ:
        result = f'‚ûñ –ù–∞–º—É–Ω–∞ –º–∏“õ–¥–æ—Ä–∏: <code>{num}</code> –¥–æ–Ω–∞ ‚ûñ'

    return result


def get_caption_cat_or_product(language: str, items, subcategory):
    result = CHOOSE_BELOW[language]
    if len(items) > 0 and len(subcategory) > 0:
        result = CHOOSE_CATEGORY_OR_ITEMS[language]
    elif len(items) > 0:
        result = CHOOSE_PRODUCT[language]
    elif len(subcategory) > 0:
        result = CHOOSE_CATEGORY[language]
    return result


NOT_FOUND_ITEM = {
    LANGUAGE_RU: f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞... üòî',
    LANGUAGE_EN: f'Unfortunately there is no such product... üòî',
    LANGUAGE_UZ: f'–ê—Ñ—Å—É—Å–∫–∏ –±—É–Ω–¥–∞–π –º–∞—Ö—Å—É–ª–æ—Ç –π—û–∫... üòî'
}

NOT_FOUND_TO_ADMIN = {
    LANGUAGE_RU: f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
    LANGUAGE_EN: f'Sorry, an error has occurred ... Contact out administrator',
    LANGUAGE_UZ: f'–ö–µ—á–∏—Ä–∞—Å–∏–∑, —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏... –ò–ª—Ç–∏–º–æ—Å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏–º–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥'
}

RECORDED_TO_BASKET = {
    LANGUAGE_RU: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É',
    LANGUAGE_EN: 'Added to cart',
    LANGUAGE_UZ: '–°–∞–≤–∞—Ç–≥–∞ “õ—û—à–∏–ª—Ç–∏'
}

RECORDED_TO_MORE_ORDER = {
    LANGUAGE_RU: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–æ–ø. –∑–∞–∫–∞–∑',
    LANGUAGE_EN: 'Added to add. order',
    LANGUAGE_UZ: '“ö—û—à–∏–º—á–∞ –±—É—é—Ä—Ç–º–∞–≥–∞ “õ—û—à–∏–ª–¥–∏'
}

UNIT_WT = {
    LANGUAGE_RU: '–®—Ç—É–∫',
    LANGUAGE_EN: 'Pieces',
    LANGUAGE_UZ: '–î–æ–Ω–∞–ª–∞—Ä'
}

UNIT_WT_low = {
    LANGUAGE_RU: '—à—Ç',
    LANGUAGE_EN: 'pc',
    LANGUAGE_UZ: '–¥–æ–Ω–∞'
}

SCARCE = {
    LANGUAGE_RU: '–î–µ—Ñ–∏—Ü–∏—Ç',
    LANGUAGE_EN: '–î–µ—Ñ–∏—Ü–∏—Ç',
    LANGUAGE_UZ: 'Deficit'
}


def get_desc_of_good(language: str, item: Item):
    text = ''
    if item.running:
        text = SCARCE[language]

    return text.upper()


def def_determine_period(language: str):
    today = date.today().strftime('%d %m %Y')
    initial_period = date.today().replace(day=1).strftime('%d %m %Y')
    determine_period = '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–∏–æ–¥'
    format_period = '–í —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø—Ä–∏–º–µ—Ä'
    or_choose_below = '–õ–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ'
    if language == LANGUAGE_EN:
        determine_period = 'Determine the period'
        format_period = 'In this format and an example'
        or_choose_below = 'Or choose below'
    elif language == LANGUAGE_UZ:
        determine_period = '–î–∞–≤—Ä–Ω–∏ –∞–Ω–∏“õ–ª–∞–Ω–≥'
        format_period = '–£—à–±—É —Ñ–æ—Ä–º–∞—Ç–¥–∞ –≤–∞ –º–∏—Å–æ–ª'
        or_choose_below = '–ô–æ–∫–∏ “õ—É–π–∏–¥–∞ —Ç–∞–Ω–ª–∞–Ω–≥'
    result = f"üïí {determine_period}\n\n{format_period}:\n<b>{initial_period}</b>\n<b>{today}</b>\n\nüëá {or_choose_below}"
    return result


def get_recorded_to_basket(item_name: str, quantity: Union[int, str], price: Union[str, int], language: str,
                           remainder: Union[str, int], access_more_order=False):
    total = int(price) * int(quantity)
    result = '\n\n'.join([
        f'‚úÖ {item_name.capitalize()} - <b>{RECORDED_TO_BASKET[language].lower() if not access_more_order else RECORDED_TO_MORE_ORDER[language].lower()}</b> <code>{quantity}</code> <b>{UNIT_WT[language].lower()}</b>',
        get_remainder(language=language, num=remainder),
        get_amount(language=language, num=price)
    ])
    result += f"\n{get_total(language=language, total=total)}"
    return result


YOUR_ORDER = {
    LANGUAGE_RU: '–í–∞—à –∑–∞–∫–∞–∑',
    LANGUAGE_EN: 'Your order',
    LANGUAGE_UZ: '–°–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑'
}

YOUR_MORE_ORDER = {
    LANGUAGE_RU: '–î–æ–ø. –∑–∞–∫–∞–∑',
    LANGUAGE_EN: 'Add. order',
    LANGUAGE_UZ: '“ö—û—à–∏–º—á–∞ –±—É—é—Ä—Ç–º–∞'
}

LOADING = {
    LANGUAGE_RU: '–ó–∞–≥—Ä—É–∑–∫–∞... üöÄ',
    LANGUAGE_EN: 'Loading... üöÄ',
    LANGUAGE_UZ: '–Æ–∫–ª–∞—à... üöÄ'
}

YOU_SHOULD_BUY = {
    LANGUAGE_RU: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤',
    LANGUAGE_EN: 'Minimum quantity of goods',
    LANGUAGE_UZ: '–¢–æ–≤–∞—Ä–ª–∞—Ä–Ω–∏–Ω–≥ –º–∏–Ω–∏–º–∞–ª –º–∏“õ–¥–æ—Ä–∏'
}

HAS_NOT_ENOUGH = {
    LANGUAGE_RU: '–ù–∞ —Å–∫–ª–∞–¥–µ, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç',
    LANGUAGE_EN: 'In stock, not enough',
    LANGUAGE_UZ: '–°—Ç–æ–∫–¥–∞, –µ—Ç–∞—Ä–ª–∏ –µ–º–∞—Å'
}

CHANGED_QUANTITY_RUNNING = {
    LANGUAGE_RU: '–•–æ–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    LANGUAGE_EN: 'Hot goods, quantity changed',
    LANGUAGE_UZ: '–ò—Å—Å–∏“õ –º–∞—Ö—Å—É–ª–æ—Ç–ª–∞—Ä, —É–ª–∞—Ä–Ω–∏–Ω–≥ —Å–æ–Ω–∏ —û–∑–≥–∞—Ä–≥–∞–Ω'
}

FAILURE = {
    LANGUAGE_RU: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...',
    LANGUAGE_EN: 'An error occured, please try later...',
    LANGUAGE_UZ: '–•–∞—Ç–æ —é–∑ –±–µ—Ä–¥–∏, –∏–ª—Ç–∏–º–æ—Å –∫–µ–π–∏–Ω—Ä–æ“õ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥...'
}

MENU = {
    LANGUAGE_RU: '–ú–µ–Ω—é',
    LANGUAGE_EN: 'Menu',
    LANGUAGE_UZ: '–ú–µ–Ω—é'
}

TOTAL = {
    LANGUAGE_RU: '–í—Å–µ–≥–æ',
    LANGUAGE_EN: 'Total',
    LANGUAGE_UZ: '–ñ–∞–º–∏'
}

QUANTITY = {
    LANGUAGE_RU: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    LANGUAGE_EN: 'Quantity',
    LANGUAGE_UZ: '–ú–∏“õ–¥–æ—Ä'
}

EMPTY_BASKET = {
    LANGUAGE_RU: 'üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
    LANGUAGE_EN: 'üõí Basket is empty',
    LANGUAGE_UZ: 'üõí –°–∞–≤–∞—Ç –±—û—à'
}

CART_EMPTIED = {
    LANGUAGE_RU: '‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞',
    LANGUAGE_EN: '‚úÖ Cart has been emptied',
    LANGUAGE_UZ: '‚úÖ –°–∞–≤–∞—Ç –±—û—à–∞—Ç–∏–ª–¥–∏'
}

ADDITIONAL_ORDER_EMPTIED = {
    LANGUAGE_RU: 'üóë –î–æ–ø. –∑–∞–∫–∞–∑ –æ—á–∏—â–µ–Ω',
    LANGUAGE_EN: 'üóë Add. order cleared',
    LANGUAGE_UZ: 'üóë “ö—û—à–∏—à –±—É—é—Ä—Ç–º–∞ —Ç–æ–∑–∞–ª–∞–Ω–¥–∏'
}

WRITE_QUANTITY = {
    LANGUAGE_RU: '‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
    LANGUAGE_EN: '‚ö† Enter quantity',
    LANGUAGE_UZ: '‚ö† –ú–∏“õ–¥–æ—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥'
}

WANT_TO_ADD_BASKET = {
    LANGUAGE_RU: '–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ?',
    LANGUAGE_EN: 'Want to order more?',
    LANGUAGE_UZ: '–ö—û–ø—Ä–æ“õ –±—É—é—Ä—Ç–º–∞ –±–µ—Ä–∏—à–Ω–∏ —Ö–æ—à–ª–∞–π—Å–∏–∑–º–∏?'
}

SEND_NUMBER = {
    LANGUAGE_RU: 'üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n'
                 '–í —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>+998 ** *** ****</b>',
    LANGUAGE_EN: 'üì± Send or enter a phone number (you can also have several separated by commas)\n'
                 'In this format: <b>+998 ** *** ****</b>',
    LANGUAGE_UZ: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–±–∏—Ä –Ω–µ—á—Ç–∞ –≤–µ—Ä–≥—É–ª –±–∏–ª–∞–Ω –∞–∂—Ä–∞—Ç–∏–ª–≥–∞–Ω –±—û–ª–∏—à–∏ –º—É–º–∫–∏–Ω)\n'
                 '–£—à–±—É —Ñ–æ—Ä–º–∞—Ç–¥–∞: <b>+998 ** *** ****</b>'
}

SEND_LOCATION = {
    LANGUAGE_RU: 'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä',
    LANGUAGE_EN: 'üìç Send your location or enter a landmark',
    LANGUAGE_UZ: 'üìç –ñ–æ–π–ª–∞—à—É–≤–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ –±–µ–ª–≥–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥'
}

SEND_ME_TYPE_OF_PAYMENTS = {
    LANGUAGE_RU: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∑–∞ –í–∞—à –∑–∞–∫–∞–∑',
    LANGUAGE_EN: 'Select a payment method for your order',
    LANGUAGE_UZ: '–ë—É—é—Ä—Ç–º–∞ —É—á—É–Ω —Ç—û–ª–æ–≤ —É—Å—É–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥'
}

PHONE_NUMBER = {
    LANGUAGE_RU: '–¢–µ–ª–µ—Ñ–æ–Ω',
    LANGUAGE_EN: 'Phone number',
    LANGUAGE_UZ: '–¢–µ–ª–µ—Ñ–æ–Ω'
}

NOT_SET = {
    LANGUAGE_RU: '–ù–µ –∑–∞–¥–∞–Ω–æ',
    LANGUAGE_EN: 'Not set',
    LANGUAGE_UZ: '–é—Ä–Ω–∞—Ç–∏–ª–º–∞–≥–∞–Ω'
}

ADDRESS = {
    LANGUAGE_RU: '–ê–¥—Ä–µ—Å',
    LANGUAGE_EN: 'Address',
    LANGUAGE_UZ: '–ú–∞–Ω–∑–∏–ª'
}

COMMENT = {
    LANGUAGE_RU: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
    LANGUAGE_EN: 'Comment',
    LANGUAGE_UZ: '–®–∞—Ä—Ö'
}

TYPE_OF_PAYMENT = {
    LANGUAGE_RU: '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
    LANGUAGE_EN: 'Payment method',
    LANGUAGE_UZ: '–¢—û–ª–æ–≤ —É—Å—É–ª–∏'
}

ACCEPTED = {
    LANGUAGE_RU: '–ü—Ä–∏–Ω—è—Ç',
    LANGUAGE_EN: 'Accepted',
    LANGUAGE_UZ: '“ö–∞–±—É–ª “õ–∏–ª–∏–Ω–≥–∞–Ω'
}

CANCELED = {
    LANGUAGE_RU: '–û—Ç–º–µ–Ω–µ–Ω',
    LANGUAGE_EN: 'Canceled',
    LANGUAGE_UZ: '–ë–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏'
}

ORDER_STATUS = {
    LANGUAGE_RU: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
    LANGUAGE_EN: 'Order status',
    LANGUAGE_UZ: '–ë—É—é—Ä—Ç–º–∞ —Ö–æ–ª–∞–¥–∏'
}

EMPTY_ORDER = {
    LANGUAGE_RU: '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ üòï',
    LANGUAGE_EN: 'No order history üòï',
    LANGUAGE_UZ: '–ë—É—é—Ä—Ç–º–∞ —Ç–∞—Ä–∏—Ö–∏ –π—û–∫ üòï'
}

DONT_HACK_ME = {
    LANGUAGE_RU: '–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—è –≤–∑–ª–æ–º–∞—Ç—å üòî',
    LANGUAGE_EN: 'Don\'t try to hack me üòî',
    LANGUAGE_UZ: '–ú–µ–Ω–∏ –±—É–∑–∏—à–≥–∞ —É—Ä–∏–Ω–º–∞–Ω–≥ üòî'
}

NOTE = {
    LANGUAGE_RU: '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ',
    LANGUAGE_EN: 'Note',
    LANGUAGE_UZ: '–ï—Å–ª–∞—Ç–º–∞'
}


async def get_text_for_item(basket_item, language, attr=None, quantity=None):
    if attr is None:
        attr = others.get_attribute_by_language(language=language)
    if quantity is None:
        quantity = basket_item.quantity
    item = basket_item.product
    total = item.price * quantity

    reminder = item.reminder
    if not item.reminder:
        reminder = NOT_SET[language].lower()
    text = f"<b>{getattr(item, attr)}</b> ({get_remainder(language=language, num=item.reminder)})"

    # text += f"\n\n {get_remainder(language=language, num=item.reminder)}"
    text += f"\n\n {get_amount(language=language, num=item.price)}"
    text += f"\n {get_total(language=language, total=total)}"
    return text


async def get_text_for_item_2(quantity, item, language):
    attr_desc = others.get_attribute_by_language(language=language, name_object='description')
    total = quantity * item.price

    text = f"{markdown.hbold(getattr(item, others.get_attribute_by_language(language=language)))} ({get_remainder(language=language, num=item.reminder)})"
    result_description = getattr(item, attr_desc)
    if result_description:
        text += f"\n\n {result_description}"
    # text += f"\n\n {get_remainder(language=language, num=item.reminder)}"
    text += f"\n\n {get_amount(language=language, num=item.price)}"
    text += f"\n {get_total(language=language, total=total)}"

    return text


def get_title_delete_from_basket(product: str, language: str):
    result = ''
    if language == LANGUAGE_RU:
        result = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ <b>{product}</b> –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    elif language == LANGUAGE_UZ:
        result = f"‚úÖ –°–∞–≤–∞—Ç–¥–∞–Ω <b>{product}</b> –æ–ª–∏–Ω–¥–∏"
    elif language == LANGUAGE_EN:
        result = f"‚úÖ Removed <b>{product}</b> from the cart"
    return result


def get_title_order(language: str, basket_items, additional_order={'order_list': [], "access": False}):
    total = 0
    total_quantity = 0
    result = f'<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî{YOUR_ORDER[language].upper()}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n'

    # result += f"\n<b>üìí {MENU[language].upper()}:</b>\n\n"
    attr = others.get_attribute_by_language(language=language)
    i = 1
    for bst_item in basket_items:
        total_one = bst_item.quantity * bst_item.product.price
        total_quantity += bst_item.quantity
        total += total_one

        result += f"<b>{i}) {getattr(bst_item.product, attr)}</b> (" \
                  f"{get_remainder(language=language, num=bst_item.product.reminder)}) - " \
                  f"<code>{bst_item.quantity}</code> x " \
                  f"<code>{bst_item.product.price} {get_currency(language=language).lower()}</code> = <code>{total_one} {SUM[language].lower()}</code>" \
                  f'\n'
        i = i + 1

    result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total_quantity).replace(',', ' ')} {UNIT_WT_low[language].lower()}; {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}\n\n"

    # ----------- MORE_ORDER ----------
    order_list = additional_order['order_list']
    if additional_order['access']:
        if len(order_list) > 0:
            result += f'<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî{YOUR_MORE_ORDER[language].upper()}‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n'

        total = 0
        total_quantity = 0
        i = 1
        for add_order in order_list:
            total_one = add_order['quantity'] * add_order['item'].price
            total_quantity += add_order['quantity']
            total += total_one

            result += f"<b>{i}) {getattr(add_order['item'], attr)}</b> (" \
                      f"{get_remainder(language=language, num=add_order['item'].reminder)}) - " \
                      f"<code>{add_order['quantity']}</code> x " \
                      f"<code>{add_order['item'].price} {get_currency(language=language).lower()}</code> = <code>{total_one} {SUM[language].lower()}</code>" \
                      f'\n'
            i = i + 1

        if len(order_list) > 0:
            result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total_quantity).replace(',', ' ')} {UNIT_WT_low[language].lower()}; {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}"

    return result


async def get_data_user(language: str):
    data = await dp.current_state().get_data()
    location = data.get("location")
    phone_number = data.get("phone_number")
    comment = data.get("comment")
    type_of_payment = data.get("type_of_payment")
    title_phone_number = f"<b>{PHONE_NUMBER[language]}</b>: {phone_number if phone_number else NOT_SET[language]}"
    title_address = f"<b>{ADDRESS[language]}</b>: {location if location else NOT_SET[language]}"
    title_comment = f"<b>{COMMENT[language]}</b>: {comment if comment else NOT_SET[language]}"
    # title_type_of_payment = f"<b>{TYPE_OF_PAYMENT[language]}</b>: {type_of_payment if type_of_payment else NOT_SET[language]}"
    # result = '\n'.join([title_phone_number, title_address, title_type_of_payment, title_comment])
    result = '\n'.join([title_phone_number, title_address, title_comment])
    return result


async def title_accepted_order(language: str, basket_items, id: Union[str, int], order_additional_list):
    result = await title_confirm_order(language=language, basket_items=basket_items, id=id,
                                       order_additional_list=order_additional_list)
    return result


def get_canceled_order(id, language: str):
    result = f"‚ùå {YOUR_ORDER[language].upper()} - #{id} - {CANCELED[language].upper()}"
    return result


async def title_confirm_order(language: str, basket_items, id: Union[str, int] = None, order_additional_list=None):
    total = 0
    total_quantity = 0
    contacts_user = await get_data_user(language)
    if id:
        result = '\n\n'.join([
            f"<b>{YOUR_ORDER[language].upper()} - #{id}</b>\n‚úÖ {ACCEPTED[language]}!",
            contacts_user,
            f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî<b>{YOUR_ORDER[language].upper()}</b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
        ])
    else:
        result = '\n\n'.join([
            f"<b>{YOUR_ORDER[language].upper()}</b>",
            contacts_user,
            f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî<b>{YOUR_ORDER[language].upper()}</b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
        ])

    attr = others.get_attribute_by_language(language=language)
    i = 1
    for bst_item in basket_items:
        total_one = bst_item.quantity * bst_item.product.price
        total_quantity += bst_item.quantity
        total += total_one
        result += f"<b>{i}) {getattr(bst_item.product, attr)}</b> - " \
                  f"<code>{bst_item.quantity}</code> x " \
                  f"<code>{bst_item.product.price} {get_currency(language=language).lower()}</code> = <code>{total_one} {SUM[language].lower()}</code>" \
                  f'\n'
        i = i + 1
    result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total_quantity).replace(',', ' ')} {UNIT_WT_low[language].lower()}; {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}\n\n"

    # more_order
    if order_additional_list is not None and len(order_additional_list) > 0:
        total = 0
        total_quantity = 0

        result += f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî<b>{YOUR_MORE_ORDER[language].upper()}</b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
        i = 1
        for order_add in order_additional_list:
            total_one = order_add.quantity * order_add.product.price
            total_quantity += order_add.quantity
            total += total_one
            result += f"<b>{i}) {getattr(order_add.product, attr)}</b> - " \
                      f"<code>{order_add.quantity}</code> x " \
                      f"<code>{order_add.product.price} {get_currency(language=language).lower()}</code> = <code>{total_one} {SUM[language].lower()}</code>" \
                      f'\n'
            i = i + 1
        result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total_quantity).replace(',', ' ')} {UNIT_WT_low[language].lower()}; {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}"

    return result


# ----------------------------------------- MY ORDERS -------------------------------------

async def title_my_order(language: str, order):
    total = 0
    contacts_user = await get_data_order(language, order)

    order_status = order.order_status
    order_status = ORDER_STATUSES[order_status].get(language)
    title_order_status = f"<b>{ORDER_STATUS[language]}</b>: {order_status if order_status else NOT_SET[language]}"

    note = order.note
    title_note = f"<b>{NOTE[language]}</b>: {note if note else NOT_SET[language]}\n"

    line = '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî'
    result = '\n'.join([
        f"<b>{YOUR_ORDER[language].upper()} - #{order.id}</b>\n",
        contacts_user,
        f'{line}\n'
    ])

    attr = others.get_attribute_by_language(language=language)
    i = 1
    order_items = await db_commands.get_order_item_filter(order=order)
    if order_items:
        for order_item in order_items:
            total += order_item.quantity * order_item.price
            result += f"<b>{i}) {getattr(order_item.product, attr)}</b> - <code>{order_item.quantity}</code> x <code>{order_item.price}</code> {get_currency(language=language).lower()}" \
                      f'\n'
            i = i + 1
    result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}\n\n"

    more_order_items = await db_commands.get_more_order_item_filter(order=order)
    if more_order_items and len(more_order_items):
        total = 0
        total_quantity = 0

        result += f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî<b>{YOUR_MORE_ORDER[language].upper()}</b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n'
        i = 1
        for more_order in more_order_items:
            total += more_order.quantity * more_order.price
            result += f"<b>{i}) {getattr(more_order.product, attr)}</b> - <code>{more_order.quantity}</code> x <code>{more_order.price}</code> {get_currency(language=language).lower()}" \
                      f'\n'
            i = i + 1

        result += f"\n<b>{TOTAL[language].upper()}:</b> {'{:,}'.format(total).replace(',', ' ')} {get_currency(language=language).lower()}\n\n"

    result += f"{line}\n{title_order_status}\n{title_note}"
    return result


async def get_data_order(language: str, order):
    location = order.address
    phone_number = order.phone_number
    comment = order.comment

    type_of_payment = None
    if order.type_of_payment:
        type_of_payment = TYPES_OF_PAYMENT[order.type_of_payment].get(language)
    title_phone_number = f"<b>{PHONE_NUMBER[language]}</b>: {phone_number if phone_number else NOT_SET[language]}"
    title_address = f"<b>{ADDRESS[language]}</b>: {location if location else NOT_SET[language]}"
    title_comment = f"<b>{COMMENT[language]}</b>: {comment if comment else NOT_SET[language]}"
    # title_type_of_payment = f"<b>{TYPE_OF_PAYMENT[language]}</b>: {type_of_payment if type_of_payment else NOT_SET[language]}"

    result = '\n'.join([title_phone_number,
                        title_address, title_comment])
    # title_type_of_payment,

    return result


async def get_text_for_calculator(quantity: int, item, language: str, sample_quantity: int):
    total = quantity * item.price

    text = f"{markdown.hbold(getattr(item, others.get_attribute_by_language(language=language)))} ({get_remainder(language=language, num=item.reminder)})"
    # attr_desc = others.get_attribute_by_language(language=language, name_object='description')
    # result_description = getattr(item, attr_desc)
    # if result_description:
    #     text += f"\n\n {result_description}"
    # text += f"\n\n {get_remainder(language=language, num=item.reminder)}"
    text += f"\n\n {get_amount(language=language, num=item.price)}"
    text += f"\n {get_total(language=language, total=total)}"
    text += f"\n {get_quantity(language=language, quantity=quantity)}"
    text += f"\n\n {get_sample_quantity(language=language, num=sample_quantity)}"

    return text
